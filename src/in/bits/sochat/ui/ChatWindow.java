package in.bits.sochat.ui;

import in.bits.sochat.bean.Message;
import in.bits.sochat.client.Client;
import java.awt.event.KeyEvent;
import java.sql.Time;
import javax.swing.JFrame;

/**This form creates a window of one-to-one chatting a.k.a Peer to Peer Communication
 *@see JFrame
 */
public class ChatWindow extends javax.swing.JFrame {

    /**
     * Creates new form WelcomeWindow
     */
    
    private final Client client;
    private final String receiver;
    
    /**
     * This method sends a DISCONNECT message to the receiver when user closes
     * the Chat Window.
     * @see Type
     */
    
    public void exitOnClose(){
        client.sendMessage(new Message(in.bits.sochat.bean.Type.DISCONNECT,client.getUserName(),"" , null, receiver));
        this.setVisible(false);
        System.exit(0);
    }
    
    /**
     * Creates a ChatWindow for one-to-one communication between a sender and
     * receiver
     * @param client: the sender
     * @param receiver : the receiver
     */
    public ChatWindow(Client client, String receiver) {
        this.client = client;
        this.receiver = receiver;
        initComponents();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        nameLabel.setText("Chatting with:\n"+receiver); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        namePanel = new javax.swing.JPanel();
        profileIcon = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        outputScrollPane = new javax.swing.JScrollPane();
        output = new javax.swing.JEditorPane();
        inputScrollPane = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        disconnect = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SoChat");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(305, 510));
        setResizable(false);

        namePanel.setBackground(new java.awt.Color(255, 255, 255));

        profileIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        profileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chaticon.png"))); // NOI18N

        welcomeLabel.setFont(new java.awt.Font("Letter Gothic Std", 0, 16)); // NOI18N
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("  SoChat");

        nameLabel.setFont(new java.awt.Font("Segoe UI Semibold", 1, 11)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("Tarun Dhiraj");

        javax.swing.GroupLayout namePanelLayout = new javax.swing.GroupLayout(namePanel);
        namePanel.setLayout(namePanelLayout);
        namePanelLayout.setHorizontalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(namePanelLayout.createSequentialGroup()
                .addComponent(profileIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        namePanelLayout.setVerticalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profileIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(welcomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        output.setEditable(false);
        output.setBackground(new java.awt.Color(204, 241, 248));
        outputScrollPane.setViewportView(output);

        input.setColumns(20);
        input.setLineWrap(true);
        input.setRows(4);
        input.setToolTipText("Enter your message here");
        input.setDragEnabled(true);
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputKeyPressed(evt);
            }
        });
        inputScrollPane.setViewportView(input);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        menuBar.setBackground(new java.awt.Color(0, 204, 204));

        file.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        file.setText("Connection");

        disconnect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK));
        disconnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disconnect.png"))); // NOI18N
        disconnect.setText("Disconnect");
        disconnect.setToolTipText("Disconnect Chat");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });
        file.add(disconnect);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.setToolTipText("Exit Chat");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        file.add(Exit);

        menuBar.add(file);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(namePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(namePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function sends a LOGOUT message to the client on the receiving end.
     * And then disposes the Chat Window
     * @param evt : Event
     * @see ActionEvent
     */
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        client.sendMessage(new Message(in.bits.sochat.bean.Type.DISCONNECT,client.getUserName(),"" , null, receiver));
        this.setVisible(false);
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * This method is invoked each time the send button is clicked.
     * This message takes message from the input text field and creates
     * a message of type <strong>CHAT</strong>
     * @param evt Event Object
     * @see ActionEvent
     * @see Message
     * @see Type
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        Time t = new Time(System.currentTimeMillis());
        client.sendMessage(new Message(in.bits.sochat.bean.Type.UNICAST,client.getUserName(),input.getText() , t, receiver));
        setTextOutput(client.getUserName()+": ["+t+"]: "+input.getText());
        input.setText("");
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * This function is called when user disconnects the chat by clicking on
     * <strong>disconnect</strong> menuitem of the <strong>connection</strong>
     * menu.
     * @param evt ActionEvent object
     * @see ActionEvent
     */
    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        client.sendMessage(new Message(in.bits.sochat.bean.Type.DISCONNECT,client.getUserName(),"" , null, receiver));
        output.setText(output.getText() + "\n<<<Chat Disconnected from "+receiver+" >>>");
        input.setEnabled(false);
        sendButton.setEnabled(false);
    }//GEN-LAST:event_disconnectActionPerformed

    private void inputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            Time t = new Time(System.currentTimeMillis());
            client.sendMessage(new Message(in.bits.sochat.bean.Type.UNICAST,client.getUserName(),input.getText().trim() , t, receiver));
            setTextOutput(client.getUserName()+": ["+t+"]: "+input.getText());
            input.setText("");
        }
    }//GEN-LAST:event_inputKeyPressed
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem disconnect;
    private javax.swing.JMenu file;
    private javax.swing.JTextArea input;
    private javax.swing.JScrollPane inputScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPanel namePanel;
    private javax.swing.JEditorPane output;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JLabel profileIcon;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Sets the message received from the server as text to the output.
     * @param message The message from the server
     * @see Message
     */
    public void setTextOutput(String message) {
        output.setText(output.getText()+"\n"+message);
    }
    
    /**This function disables the input fiend so that the client can't not input text 
     * after the connection has been dropped.
     * 
     */
    public void disableInput(){
        input.setEnabled(false);
        sendButton.setEnabled(false);
    }
}